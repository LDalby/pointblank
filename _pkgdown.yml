destination: docs

home:
  strip_header: true

reference:
  - title: Planning and Prep
    desc: >
      Should you need to understand your data a bit more, use the `scan_data()`
      function. It provides a comprehensive report on the data you might be
      planning on validating. If going down the road of preparing a data quality
      analysis, call on an *agent* to carry out that eventual plan with
      `create_agent()`. The agent here is to be told which table is the target,
      and, we devise a stepwise validation plan with validation functions. If
      collecting and publishing table information is your goal, then begin with
      the `create_informant()` function.
    contents:
    - scan_data
    - create_agent
    - create_informant
    - validate_rmd
    - action_levels
    - db_tbl
    - col_schema

  - title: Validation, Expectation, and Test Functions
    desc: >
      Validation steps are either used with an *agent* object or, more simply,
      just with the table of interest. When used with an *agent*, each step
      function called works to build up a validation plan (which is executed
      with the `interrogate()` function). If used directly on data (that is, no
      agent is involved whatsoever), then the data is checked and passed
      through. However, if we (1) set `warn_*` and/or `stop_*` thresholds and
      (2) the level of failed validation units exceeds those set levels, then
      we'll get either a warning or a stop. Each validation step function is
      assoicated with an expectation function (of the form `expect_*()`). These
      expectation functions are equivalent in usage and behavior to those in
      the **testthat** package. Finallly, each validation function has an
      associated test function (of the form `test_*()`) which always returns a
      logical value.
    contents:
    - col_vals_lt
    - col_vals_lte
    - col_vals_equal
    - col_vals_not_equal
    - col_vals_gte
    - col_vals_gt
    - col_vals_between
    - col_vals_not_between
    - col_vals_in_set
    - col_vals_not_in_set
    - col_vals_null
    - col_vals_not_null
    - col_vals_regex
    - col_vals_expr
    - conjointly
    - rows_distinct
    - col_is_character
    - col_is_numeric
    - col_is_integer
    - col_is_logical
    - col_is_date
    - col_is_posix
    - col_is_factor
    - col_exists
    - col_schema_match
    
  - title: Information Functions
    desc: >
      We can progressively add information to an *informant* object by using the
      collection of `info_*()` functions. We can add more table-based properties
      with the `info_tabular()` function, details about the nature of each
      column with the `info_columns()` function, and add sections of our own
      choosing (and the info that make sense for those sections) with the
      `info_section()` function. Snippets of information can be gleaned from the
      target table by using the `info_snippet()` function. These bits of
      information can be incorporated in text defined by the other `info_*()`
      functions via `{ }`.
    contents:
    - info_tabular
    - info_columns
    - info_section
    - info_snippet
    
  - title: Emailing
    desc: >
      Sometimes we want to email a report of a validation because of the
      importance of the information contained therein. The `email_blast()`
      function can be used within the `end_fns` argument of `create_agent()`,
      giving us options to send a customizable message only if specified
      conditions are met.
    contents:
    - email_blast
    - email_preview
    - stock_msg_body
    - stock_msg_footer
    
  - title: "Agent: Interrogate and Report"
    desc: >
      If we have an *agent* object that has a plan (i.e., validation steps),
      the `interrogate()` function instructs the *agent* to interrogate the
      target table. The agent will go to work and also perform specified
      side-effect functions at the step level and upon completion (if those are
      functions are defined). After interrogation, we can get a report through
      printing, however, we can take advantage of more options by using the
      `get_agent_report()` function.
    contents:
    - interrogate
    - get_agent_report
    
  - title: "Informant: Incorporate and Report"
    desc: >
      If we have an *informant* object that has been loaded with information
      from using the `info_*()` functions, the `incorporate()` function works
      to regenerate snippets and integrate those into the info text. After
      refreshing the table information, we can get an information report through
      printing, or, by using `get_informant_report()` function.
    contents:
    - incorporate
    - get_informant_report
    
  - title: Post-interrogation
    desc: >
      The agent always has a special list called an x-list. Access that by
      invoking the `get_agent_x_list()` and you'll then have a smorgasbord of
      information about how the validation went down. Table extracts are
      collected by default for failed rows (up to a limit) and we can access
      those with `get_data_extracts()`. Table rows can be sundered into 'pass'
      and 'fail' pieces. Access those table fragments with the
      `get_sundered_data()` function. Want to know if all validation steps have
      passed with flying colors? Sometimes that could happen; use the
      `all_passed()` function to find out.
    contents:
    - get_agent_x_list
    - get_data_extracts
    - get_sundered_data
    - all_passed
    
  - title: Object Ops
    desc: >
      We have options for writing an agent or informant to disk with the 
      `x_write_disk()` function. The on-disk object can be retrieved with the
      `x_read_disk()` function. A set of functions for setting and removing
      these objects' association to a data table or a table-reading function is
      also available in this function family.
    contents:
    - x_write_disk
    - x_read_disk
    - set_tbl
    - remove_tbl
    - set_read_fn
    - remove_read_fn
  
  - title: pointblank YAML
    desc: >
      YAML files can be used in **pointblank** for two distinct purposes: (1)
      to define agents and their validation plans, and (2) to define information
      for tables. The `yaml_write()` function allows us write agent and/or
      informant YAML from the namesake objects. We can read them back from disk
      by using the `yaml_read_agent()` and `yaml_read_informant()` functions. As
      a nice shortcut, we can interrogate a table directly from a **pointblank**
      YAML file with `yaml_agent_interrogate()`.
    contents:
    - yaml_write
    - yaml_read_agent
    - yaml_read_informant
    - yaml_agent_interrogate
    - yaml_agent_string
    - yaml_agent_show_exprs
    - yaml_informant_incorporate
    
  - title: Datasets
    contents:
    - small_table
    - small_table_sqlite
    
navbar:
  type: default
  left:
  - text: Intro
    href: articles/intro-to-pointblank.html
  - text: Reference
    href: reference/index.html
  - text: News
    href: news/index.html
  right:
  - icon: fa-github fa-lg
    href: https://github.com/rich-iannone/pointblank

development:
  version_tooltip: "Development version"
