% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metadata_add.R
\name{meta_section}
\alias{meta_section}
\title{Add metadata that focuses on some key aspect of the data table}
\usage{
meta_section(metadata, section_name, ...)
}
\arguments{
\item{metadata}{A metadata object of class \code{ptblank_metadata}.}

\item{section_name}{The name of the section for which this metadata pertains.}

\item{...}{Metadata parameters as a series of named arguments.}
}
\value{
A \code{ptblank_metadata} object.
}
\description{
While the \code{\link[=meta_table]{meta_table()}} and \code{\link[=meta_columns]{meta_columns()}} functions allow us to
add/modify metadata properties for specific sections, the \code{meta_section()}
makes it possible to add sections of our own choosing and the properties that
make sense for those sections. Define a \code{section_name} and provide a series
of named arguments (in the form \code{property_name = "Description of property."})
to build the metadata content for that section.
}
\examples{
# Create a pointblank `metadata`
# object with the `create_metadata()` and
# the `small_table` dataset
metadata <- create_metadata(small_table)

# The `metadata` object has the 'table'
# and 'columns' sections; we can create
# entirely different sections with their
# own properties using `meta_section()`
metadata <-
  metadata \%>\%
  meta_section(
    section_name = "notes",
    creation = "Dataset generated on (2020-01-15).",
    usage = "`small_table \%>\% dplyr::glimpse()`"
  )

# Upon printing the `metadata` object, we see
# the addition of the 'notes' section and its
# own metadata

# The `metadata` object can be written to
# a YAML file with the `yaml_write()`
# function; then, metadata properties can
# be directly edited or modified
# yaml_write(
#   metadata = metadata,
#   filename = "metadata.yml"
# )

# The YAML file can then be read back
# into a metadata object with the
# `meta_yaml_read()` function
# metadata <-
#   meta_yaml_read(path = "metadata.yml")

}
