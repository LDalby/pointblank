% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/write_testthat_file.R
\name{write_testthat_file}
\alias{write_testthat_file}
\title{Transform a \strong{pointblank} agent to a testthat test file}
\usage{
write_testthat_file(
  agent,
  name = NULL,
  path = NULL,
  overwrite = FALSE,
  make_read_only = TRUE,
  skips = NULL
)
}
\arguments{
\item{agent}{An agent object of class \code{ptblank_agent}.}

\item{name}{An optional name for for the \strong{testhat} test file. This should
be a name without extension and without the leading \code{"test-"} text. If
nothing is supplied, the name will be derived from the \code{tbl_name} in the
agent. If that's not present, a generic name will be used.}

\item{path}{A path can be specified here if there shouldn't be an attempt to
place the file in \code{testthat/tests}.}

\item{overwrite}{Should a \strong{testthat} file of the same name be overwritten?
By default, this is \code{FALSE}.}

\item{make_read_only}{Should the file to be written be read only? If \code{TRUE}
(the default), it will be read-only and text at the top of the file will
indicate this.}

\item{skips}{This is an optional vector of test-skipping keywords modeled
after the \strong{testthat} \verb{skip_on_*()} functions. The following keywords can
be used to include \verb{skip_on_*()} statements: \code{"cran"}
(\code{\link[testthat:skip]{testthat::skip_on_cran()}}), \code{"travis"} (\code{\link[testthat:skip]{testthat::skip_on_travis()}}),
\code{"appveyor"} (\code{\link[testthat:skip]{testthat::skip_on_appveyor()}}), \code{"ci"}
(\code{\link[testthat:skip]{testthat::skip_on_ci()}}), \code{"covr"} (\code{\link[testthat:skip]{testthat::skip_on_covr()}}), \code{"bioc"}
(\code{\link[testthat:skip]{testthat::skip_on_bioc()}}). There are keywords for skipping tests on
certain operating systems and all of them will insert a specific
\code{\link[testthat:skip]{testthat::skip_on_os()}} call. These are \code{"windows"}
(\code{skip_on_os("windows")}), \code{"mac"} (\code{skip_on_os("mac")}), \code{"linux"}
(\code{skip_on_os("linux")}), and \code{"solaris"} (\code{skip_on_os("solaris")}). These
calls will be placed at the top of the generated \strong{testthat} test file.}
}
\value{
Invisibly returns \code{TRUE} if the \strong{testthat} file has been written.
}
\description{
With a \strong{pointblank} \emph{agent}, we can write a \strong{testthat} test file and opt
to place it in the \code{testthat/tests} if it is available in the project path
(we can specify an alternate path as well). This works by transforming the
validation steps to a series of \verb{expect_*()} calls inside individual
\code{\link[testthat:test_that]{testthat::test_that()}} statements. A hard requirement for using
\code{write_testthat_file()} on an agent is the presence of a \code{read_fn}, which is
a function that is invoked to obtain the target table. The \code{read_fn}
statement will be placed at the top of the \strong{testthat} test file so that the
target table is available for each of the \code{\link[testthat:test_that]{testthat::test_that()}} statements
that follow. If an \emph{agent} does not have a \code{read_fn} it can be added via the
\code{\link[=set_read_fn]{set_read_fn()}}.
}
